# Importation des bibliothèques nécessaires
import yfinance as yf
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from scipy.optimize import minimize

# Définition des tickers et des noms des entreprises
tickers_titres = {
    "AC.PA": "Accor",
    "AI.PA": "Airbus",
    "AIR.PA": "Air Liquide",
    "ORA.PA": "Orange",
    "ENGI.PA": "Engie",
    "SGO.PA": "Saint-Gobain",
    "VIE.PA": "Veolia",
    "BNP.PA": "BNP Paribas",
    "DG.PA": "Dassault Systèmes",
    "DSY.PA": "Dassault Aviation",
    "CA.PA": "Crédit Agricole",
    "BN.PA": "Danone",
    "MC.PA": "LVMH",
    "SAN.PA": "Sanofi",
    "SU.PA": "Schneider Electric",
    "TTE.PA": "TotalEnergies",
    "VIV.PA": "Vivendi",
    "^TYX": "US 30 Year T-Bond",
    "CAC.PA": "Amundi CAC 40 ETF"  # Benchmark
}

tickers = list(tickers_titres.keys())

# Définition de la période d'analyse
start_date = "2014-01-01"
end_date = "2016-12-31"

# Téléchargement des données de marché via Yahoo Finance
df_all = yf.download(tickers, start=start_date, end=end_date)["Close"].dropna()

# Séparation des données du benchmark et des actifs du portefeuille
df_benchmark = df_all["CAC.PA"]
df_portfolio = df_all.drop(columns=["CAC.PA"])

# Calcul des rendements journaliers
returns_benchmark = df_benchmark.pct_change().dropna()
returns_portfolio = df_portfolio.pct_change().dropna()

# Alignement des dates
returns_benchmark = returns_benchmark.loc[returns_portfolio.index]

# Calcul des statistiques nécessaires
n_days = 252  # Nombre de jours boursiers par an
mean_returns = returns_portfolio.mean() * n_days           # Rendements annualisés des actifs
cov_matrix = returns_portfolio.cov() * n_days                # Matrice de covariance annualisée
mean_benchmark = returns_benchmark.mean() * n_days           # Rendement annualisé du benchmark

# Taux sans risque estimé via la moyenne de TYX
risk_free_rate = df_all["^TYX"].mean() / 100

# Fonction de minimisation du Sharpe Ratio négatif
def negative_sharpe_ratio(weights, mean_returns, cov_matrix, rf):
    portfolio_return = np.dot(weights, mean_returns)
    portfolio_volatility = np.sqrt(weights.T @ cov_matrix @ weights)
    sharpe_ratio = (portfolio_return - rf) / portfolio_volatility
    return -sharpe_ratio

# Fonction de calcul des contributions au risque (ERC)
def risk_contribution(weights, cov_matrix):
    port_volatility = np.sqrt(weights.T @ cov_matrix @ weights)
    marginal_contribution = (cov_matrix @ weights) / port_volatility
    risk_contributions = weights * marginal_contribution
    return risk_contributions

# Fonction d'objectif ERC (minimisation de l'écart des contributions au risque)
def diversification_objective(weights, cov_matrix):
    risk_contributions = risk_contribution(weights, cov_matrix)
    return np.std(risk_contributions)

# Fonction objective combinée avec pénalité lambda
def combined_objective(weights, mean_returns, cov_matrix, rf, lam):
    return negative_sharpe_ratio(weights, mean_returns, cov_matrix, rf) + lam * diversification_objective(weights, cov_matrix)

# Contraintes : somme des poids = 1 et borne inférieure à 1% pour chaque actif
constraints = [{'type': 'eq', 'fun': lambda w: np.sum(w) - 1}]
bounds = [(0.01, None) for _ in range(len(mean_returns))]

# Initialisation des poids (équipondérés)
initial_weights = np.ones(len(mean_returns)) / len(mean_returns)

# Recherche de la meilleure valeur de lambda via une recherche par grille backsetting
lambdas = np.linspace(0, 1, 21)  # Teste lambda de 0 à 1 par pas de 0.05
best_lambda = None
best_IR = -np.inf
best_weights = None
best_sharpe = None

for lam in lambdas:
    res = minimize(
        combined_objective,
        initial_weights,
        args=(mean_returns, cov_matrix, risk_free_rate, lam),
        method='SLSQP',
        bounds=bounds,
        constraints=constraints
    )
    if res.success:
        w_opt = res.x
        # Calcul du Sharpe Ratio et rendement du portefeuille
        sharpe_val = -negative_sharpe_ratio(w_opt, mean_returns, cov_matrix, risk_free_rate)
        port_return = np.dot(w_opt, mean_returns)
        # Calcul de la Tracking Error
        tracking_error = np.sqrt(np.mean((returns_portfolio @ w_opt - returns_benchmark) ** 2)) * np.sqrt(n_days)
        IR_val = (port_return - mean_benchmark) / tracking_error
        # Choisir le lambda qui maximise l'Information Ratio
        if IR_val > best_IR:
            best_IR = IR_val
            best_lambda = lam
            best_weights = w_opt
            best_sharpe = sharpe_val

print(f"Meilleur lambda : {best_lambda:.2f}")
print(f"Ratio de Sharpe optimal : {best_sharpe:.4f}")
print(f"Information Ratio (IR) : {best_IR:.4f}")

# Affichage des poids optimaux sous forme d'histogramme
plt.figure(figsize=(10, 5))
plt.bar([tickers_titres[t] for t in df_portfolio.columns], best_weights, color='skyblue')
plt.xlabel("Actifs")
plt.ylabel("Poids optimal")
plt.title(f"Répartition des poids (ERC + Sharpe, \( w_i \geq 1\% \)) - λ = {best_lambda:.2f}")
plt.xticks(rotation=45, ha='right')
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()



# === Affichage du ratio de Sharpe optimal en fin de script ===
print("\n=== FIN DU SCRIPT ===")
print(f"Le ratio de Sharpe optimal est : {optimal_sharpe_ratio}")

